`timescale 1ns / 1ps

module MainProjectv0_8(
    // Hardware Inputs
    input clk,                  // Clock
    input [3:0]prox_sensor,     // IPS sensor // Movement
    input signal,          // IR signal // Delivery
    input [1:0]current,
    
    // Hardware Outputs
        // Movement
    output [3:0]in,         // H-bridge input pins
    output [1:0]Enable,         // Motor enable bits
    
        // Delivery
    output [2:0] motors,         // Mail launch motors
    
    output [15:0] LED
    );
    
// Variable Declerations
      // Frequency values
        // Reset on state 2 [nextState -> FreqDecided]
      wire [10:0]freqFinal;
      
    // State Machine/Control wires
      wire [2:0]state;          // Controls behavior of rover       // initial = 0/default [nextState]
      
      wire FreqDecided;    // Frequency calculation done bit.  // Resets on MailboxNum calculation [WhatBox -> FreqDecided]
      wire SecondsDone;         // Software delay done bit.         // Resets after 1 second. [SecondCountdown]
      wire SignalDetected; // IR sensor initial pulse bit.     // Resets on MailboxNum calculation [WhatBox -> FreqDecided]
      wire MailDelivered;       // Motor activation bit.            // Resets on state 0. [nextState -> MailCannon]
      
      wire [1:0]MailboxNum;     // Which mailbox is it at?          // Resets on state 0. [nextState -> WhatBox]
      wire [1:0]Mail_Counter;   // Counts mail deliveries.          // Does Not Reset.
      
      wire err;


// Sub-module calls

// Frequency Counter
FreqCounter MeasureFrequency(.clk(clk), .signal(signal), .state(state), .freq(freqFinal), .FreqDecided(FreqDecided), .SignalDetected(SignalDetected), .LED(LED[4]), .FlipLED(LED[8:6]));
    // IN
        // clk = clock
        // signal[n] = signal ==> IR signal input of each side
        // state = In state 0, search for signal, else, reset.
            // In state 2, reset freq
        // freq[L/R] = frequency ==> Calculated frequency
    // OUT
        // FreqDecided[L/R] = FreqDecided ==> bit flag noting signal has been decided
        // SignalDetected[L/R] = state control variable noting signal detection ( state 0->1)    
    
// State Machine
nextState DetermineState(.clk(clk), .CurrentState(state), .err(err), .StateVars({SecondsDone,MailDelivered,SignalDetected}), .LED(LED[3:0]));
    // IN
        // clk = clock
        // StateVars =>
            // SecondsDone = 2->3 / 3->0 state change control
            // MailDelivered = 1->2 state change control
            // SignalDetected[2] = 0->1 state change control
    // OUT
        // CurrentState = state

// Determine Mailbox
WhatBox WhichBox(.clk(clk), .freqFinal(freqFinal), .Decided(FreqDecided), .state(state), .MailboxNum (MailboxNum[1:0]), .LED(LED[5]), .freqLED(LED[11:9]));
  // IN
      // clk = clk ==> clock
      // frequency[L/R] ==> frequency of the input signal on either side.
      // FreqDecided ==> Activation bit, based on whether or not a frequency has been calculated.
      // state ==> state controller
  // OUT
      // MailboxNum ==> which of the 3 mailboxes we're at.

// Delivers Mail
MailCannon LaunchCodes(.clk(clk), .MailboxNum(MailboxNum), .state(state), .MailDelivered(MailDelivered), .motor(motors), .err(err), .LED(LED[12]));
    // IN
        // clk = clock
        // MailboxNum = which mailbox [L/R]
        // state = state controller
    // OUT
        // MailCounter = how many delivered
        // motors = motors activation

// Counts down 1 second. Not modular.
SecondCountdown FinalCountdown(.clk(clk), .Mail_Counter(Mail_Counter), .MailDelivered(MailDelivered), .SecondsDone(SecondsDone));
    // IN
        // clk = clock
        // MailDelivered = Activates 2 one sec cycles
    // OUT
        // SecondsDone = Marks completion of 1 sec cycles

// Allows rover to move
IPS_Movement MoveIt(.clk(clk), .prox_sensor(prox_sensor),.state(state),.Mail_Counter(Mail_Counter), .current(current), .in(in),.Enable(Enable), .LED(LED[14:13]), .LED2(LED[15]));
    // IN
        // clk = clock
        // prox_sensor = IPS sensors to follow track
        // state = state controller
        // Mail_Counter = how many delivered
    // OUT
        // in = H=bridge input pins
        // EnableA = right motor
        // EnableB = left motor

endmodule
