`timescale 1ns / 1ps

module IPS_Movement(
    input clk,                  // Clock
    input [3:0]prox_sensor,     // IPS sensor // Movement
    input [2:0]state,           // State controller
    input [1:0]Mail_Counter,    // Mail Counter
    input [1:0]current,

    output reg [3:0]in,         // H-bridge input pins
    output [1:0]Enable,         // motors
    output [1:0]LED,
    output LED2

    );
    

    
    // in-pin controllers
    localparam Right = 4'b0101;
    localparam Left = 4'b1010;
    localparam Down = 4'b1001;
    localparam Up = 4'b0110;
    
    reg Moving;
    reg ReverseFlag;
    reg turning;
    reg stopped;
    reg reversal;
    reg StartFlag;
    reg TurnAround;
    reg TurnFlag;
    
    PWM Modulator(.clk(clk), .turning(turning), .stopped(stopped), .reversal(reversal), .LED(LED), .current(current), .Enable(Enable));

    
    initial begin
        Moving <= 0;
        ReverseFlag <= 0;
        in <= 4'd0;
        turning <= 0;
        stopped <= 0;
        reversal <= 0;
        
        StartFlag <= 1;
        TurnAround <= 0;
        TurnFlag <= 0;
    end
    
    
    assign LED2 = (in == Down || in == Up)?1:0;
    
    always @(posedge clk) begin
        case(state)
            3'b000: begin
                Moving = 1;
                ReverseFlag = 0;
            end
            3'b001: begin
                Moving = 0;
                ReverseFlag = 0;
            end
            3'b010: begin
                Moving = 0;
                ReverseFlag = 0;
            end
            3'b011: begin
                Moving = 1;
                ReverseFlag = 0;
            end
            3'b100: begin
                Moving = 0;
                ReverseFlag = 1;
            end
            default: begin
                Moving = 1;
                ReverseFlag = 0;
            end
        endcase
    end

always @(posedge clk) begin
    if(Moving && !(StartFlag || TurnAround || ReverseFlag))
        casex(prox_sensor)
            4'b0xx0: begin // All 4
                if(Mail_Counter > 2) begin
                    in = 4'd0;
                    turning = 0;
                    stopped = 1;
                    reversal = 0;
                end
                else begin // Turn Around
                    in = Left;
                    turning = 1;
                    stopped = 0;
                    reversal = 0;
                    TurnAround = 1;
                end
            end
            4'b1001: begin // Forward
                in = Up;
                turning = 0;
                stopped = 0;
                reversal = 0;
            end
            4'b1xx0: begin // Turn L
                in = Left;
                turning = 1;
                stopped = 0;
                reversal = 0;
            end
            4'b101x: begin // Adjust L
                in = Left;
                turning = 1;
                stopped = 0;
                reversal = 0;
            end
            4'b0xx1: begin // Turn R
                in = Right;
                turning = 1;
                stopped = 0;
                reversal = 0;
            end
            4'bx101: begin // Adjust R
                in = Right;
                turning = 1;
                stopped = 0;
                reversal = 0;
            end
            default: begin// Forward
                in = Up;
                turning = 0;
                stopped = 0;
                reversal = 0;
            end
        endcase
    else // Not in state 0 or starting?
        if(StartFlag) begin
            in = Up;
            turning = 0;
            stopped = 0;
            reversal = 0;
            if (prox_sensor == 4'b1001 || prox_sensor == 4'b1111 )
                StartFlag = 0;
            else
                StartFlag = 1;
        end
        else if (TurnAround) begin
            in = Left;
            turning = 1;
            stopped = 0;
            reversal = 0;
            if (prox_sensor == 4'b1111)
                TurnFlag = 1;
            if (prox_sensor == 4'b1001 && TurnFlag == 1)
                TurnAround = 0;
            else
                TurnAround = 1;
        end
        else if (ReverseFlag) begin
            in = Down;
            turning = 0;
            stopped = 0;
            reversal = 1;
        end
        else begin
            in = 2'd0;
            turning = 0;
            stopped = 1;
            reversal = 0;
        end
    end
        
    
endmodule
