`timescale 1ns / 1ps

// Frequency Counter
module FreqCounter(
                    input clk,
                    input signal,
                    input [2:0]state,
                    output reg [10:0]freq, // Calculated Frequency // IR signal
                    output reg FreqDecided, // Do we have a frequency yet? // IR signal
                    output reg SignalDetected,
                    output reg LED,
                    output reg [2:0]FlipLED
                        );
    
      reg last_sig = 0;
      reg middle_sig = 0;
      reg final_sig = 0; // Last/middle/final_sig = d flip flop to ensure that signal is changing
      
      localparam max = 'd25_000_000; // 1/4th second
      //localparam max = 'd50; // Simulation
      
      reg [31:0] ClockCount = 32'd0; // How many pulses have passed? Have they exceeded localparam max?
      reg [31:0] signal_count = 32'd0; // How many signal pulses did we see in 1/8th of a second? (incremented on posedge of signal)
      
      initial begin
        middle_sig <= 0;
        final_sig <= 0;
        last_sig <= 0;
        
        ClockCount <= 0;
        signal_count <= 0;
        freq <= 0;
        FreqDecided <= 0;
        SignalDetected <= 0;
        
        LED <= 0;
        FlipLED <= 0;
      end
        
        always @(posedge clk) // D-flip flop 
            begin
                    last_sig <= signal;
                    middle_sig <= last_sig;
                    final_sig <= middle_sig;
            end
        
        always @(posedge clk)
        begin
            if(last_sig)
                FlipLED[2] = 1;
            else
                FlipLED[2] = 0;
            if(middle_sig)
                FlipLED[1] = 1;
            else
                FlipLED[1] = 0;
            if(final_sig)
                FlipLED[0] = 1;
            else
                FlipLED[0] = 0;
            if (state != 0 && state != 1) // general reset
                begin
                    if (state == 2) begin // freq reset
                        freq = 0;
                    end
                    signal_count = 0;
                    ClockCount = 0;
                    FreqDecided = 0;
                    SignalDetected = 0;
                end
            else
                begin
                    if (ClockCount < max) begin
                            if (middle_sig & ~final_sig) begin // posedge of signal
                                if(!SignalDetected) begin
                                    SignalDetected = 1; // note signal exists
                                    ClockCount = 0;
                                end
                                LED = 1;
                                signal_count = signal_count + 1; // inc. signal counter
                            end
                            ClockCount = ClockCount + 1;
                        end
                    else // 1/4th second passed
                        begin
                            freq = signal_count * 4; // calculate freq based on signal counter
                            signal_count = 0; // reset signal counter
                            ClockCount = 0; // reset clock count
                            FreqDecided = 1; // note frequency decided
                        end
                end
        end
endmodule
