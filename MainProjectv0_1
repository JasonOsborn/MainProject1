module MainProjectv0_1(
        input clk,
//        input [2:0]induct, // Inductor sensors (x3)
//        input photo, // Photodiode x1
        
        // 0-3 H-Bridge state, 4-5, enable pins, 6- Override active
        input [6:0]sw,
        
        // H-Bridge 1 outputs
        output [3:0]in,
        output reg EnableA,
        output reg EnableB
        );
        
        // Notes: ctrl-d copies and pastes current line.
        
    // Variable Storage
    wire OverrideMoveEnable;
    reg MoveEnable = 1;
    
    reg [7:0] storage = 8'd0; // Flip-Flop storage of inputs. Size = 2*# of inputs.
    localparam eightsec = 12_500_000; // Clock cycles = 1/8th of second. 12,500,000 cycles.
    
    reg [7:0]H1State; // Manipulatable state for H-Bridge 1
    
    assign in[3:0] = H1State[3:0]; // Assign H1 register to the output.
    assign OverrideMoveEnable = 0; // Temporarily disabled for initial testing.
    
    // D-flip flops for storage- Possibly going to be unused, idk.
//    always @(posedge clk) begin // Storage of incoming data for comparison.
//                // Can compare storage[odd] to storage[previous even] to determine change in state.
//        {storage[1],storage[0]} <= {storage[0],induct[0]}; // After 2 clk pulses, storage[1] contains induct[0]
//        {storage[3],storage[2]} <= {storage[2],induct[1]}; // After 2 clk pulses, storage[3] contains induct[1]
//        {storage[5],storage[4]} <= {storage[4],induct[2]}; // After 2 clk pulses, storage[5] contains induct[2]
////        {storage[7],storage[6]} <= {storage[6],photo}; // After 2 clk pulses, storage[5] contains photo // Is valid for photoreceptor?
//                    // Needs 3x pass filters.
//    end

// +/- 10 for Hz, if that doesn't work, expand range? (Issues possible w/ 10 Hz signal)

//    assign OverrideMoveEnable = sw[6];
    always @(posedge clk) begin // Manual control over movement functions via switches.
        if (OverrideMoveEnable) begin
            H1State[3:0] = sw[3:0];
            EnableA = sw[4];
            EnableB = sw[5];
        end
        else if (MoveEnable) begin // Final: Should just assign pattern? Enables should be set by other functions related to whether or not we're trying to turn?
            // Set H-Bridge pattern 1 (Move Forward)
            H1State[3:0] = 4'b1001; // 1001 forward, 0110 backwards, 0000 hard stop.
            EnableA = 1;
            EnableB = 1;
        end
        else begin
            // Set H-Bridge pattern 2 (stop) (No enables)
            {EnableA,EnableB} = 2'd0;
        end
    end
    
    
    // Module to determine frequency- Out into a wire containing frequency. Compare frequency to parameters (10, 100, 1k Hz)
        // If match, perform mechanical function.
        
    // Module to determine if currently on the track. Check if 1 or 2 is active, if not, 0. If none, reverse and try again.
        // 1 + 2 have priority, as they dictate turning.
            // 0 at front or in middle? If at front, there will be periods where none is currently active.
        // Once turning is necessary, disable primary module and turn, then reactivate. 
    
endmodule // Main Project v0_1
