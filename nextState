`timescale 1ns / 1ps

// State Machine
    // 0->1 on SignalDetected (stop)
    // 1->2 on MailDelivered (wait)
    // 2->3 on Countdown Done (move)
    // 3->0 on Countdown Done RESET (move + look for IR)
    
    // other:
        // 1-> 0 on err (Reset Frequency Counter)
            // 
module nextState(
    input clk,
    input [2:0]StateVars,
    output reg [3:0]LED,
        // b0: SignalDetected(L + R)
        // b1: MailDelviered
        // b2: CountdownFinished
        // b3: error in WhatBox/FreqCounter calculation
    output reg [1:0] CurrentState
        // State Summaries:
            // 0: 00- Move forward on track, search for IR
            // 1: 01- Stop and deliver mail
            // 2: 10- Wait for 1 second (Mail launch)
            // 3: 11- Move forward for 1 second, NOT searching for IR
        
    );
    
    reg [1:0] nextState;
    initial begin
        CurrentState <= 2'b00;
        nextState <= 2'b00;
    end
    
always @(posedge clk)
    begin
        case(CurrentState)
            2'b00: begin
                LED = 4'b0001;
            // Move forward, look for IR
                if(StateVars[0])
                    nextState = 1;
                else
                    nextState = 0;
            end
            2'b01: begin
                LED = 4'b0010;
            // Stop
                if(StateVars[1])
                    nextState = 2;
                else
                    nextState = 1;
            end
            2'b10: begin
                LED = 4'b0100;
            // Wait
                if(StateVars[2])
                    nextState = 3;
                else
                    nextState = 2;
            end
            2'b11: begin
                LED = 4'b1000;
            // Move forward, NOT look for IR
                if(!StateVars[2])
                    nextState = 0;
                else
                    nextState = 3;
            end
            default: begin
                nextState = 0;
            end
        endcase
    end

always@(posedge clk)
    CurrentState <= nextState;
    
endmodule
