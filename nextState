`timescale 1ns / 1ps

// State Machine
    // 0->1 on SignalDetected (stop)
    // 1->2 on MailDelivered (wait)
    // 2->3 on Countdown Done (move)
    // 3->0 on Countdown Done RESET (move + look for IR)
    
    // other:
        // 1-> 0 on err (Reset Frequency Counter)
            // 
module nextState(
    input clk,
    input [2:0]StateVars,
    output [3:0]LED,
        // b0: SignalDetected(L + R)
        // b1: MailDelviered
        // b2: CountdownFinished
        // b3: error in WhatBox/FreqCounter calculation
    output reg [2:0] CurrentState
        // State Summaries:
            // 0: 000- Move forward on track, search for IR
            // 1: 001- Stop and deliver mail
            // 2: 010- Wait for 1 second (Mail launch)
            // 3: 011- Move forward for 1 second, NOT searching for IR
            // 4: 100- Passed mailbox, reverse.
        
    );
    
    reg [2:0] nextState;
    
    wire LED0;
    wire LED1;
    wire LED2;
    wire LED3;
    
    //reg [2:0] prevState; // Previous state register. Currently unused.
    initial begin
        CurrentState <= 3'b000;
        nextState <= 3'b000;
    end
    
    assign LED = {LED3,LED2,LED1,LED0};
    assign LED0 = (CurrentState == 0)?1:0;
    assign LED1 = (CurrentState == 1)?1:0;
    assign LED2 = (CurrentState == 2)?1:0;
    assign LED3 = (CurrentState == 3)?1:0;
    
    
always @(posedge clk)
    begin
        case(CurrentState)
            3'b000: begin // 0
            // Move forward, look for IR
                if(StateVars[0])
                    nextState = 1;
                else
                    nextState = 0;
            end
            3'b001: begin // 1
            // Stop
                if(StateVars[1])
                    nextState = 2;
                else
                    nextState = 1;
            end
            3'b010: begin // 2
            // Wait
                if(StateVars[2])
                    nextState = 3;
//                else if (err)
//                    nextState = 4;
                else
                    nextState = 2;
            end
            3'b011: begin // 3
            // Move forward, NOT look for IR
                if(!StateVars[2])
                    nextState = 0;
                else
                    nextState = 3;
            end
//            3'b100: begin // 4
//                if(StateVars[0])
//                    nextState = 1;
//                else
//                    nextState = 4;
//            end
            default: begin
                nextState = 0;
            end
        endcase
    end

always@(posedge clk) begin
    CurrentState <= nextState;
    //prevState <= CurrentState;
    end
    
endmodule
