`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 03/04/2019 11:19:32 AM
// Design Name: 
// Module Name: nextState
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// State Machine


    // 0->1 on SignalDetected (stop)
    // 1->2 on MailDelivered (wait)
    // 2->3 on Countdown Done (move)
    // 3->0 on Countdown Done RESET (move + look for IR)
        // resets MailCannon module vars:
            // MailDelivered
            // motor
module nextState(
    input clk,
    input [2:0]StateVars,
        // b0: SignalDetected(L + R)
        // b1: MailDelviered
        // b2: CountdownFinished
    output reg [1:0] CurrentState
        // State Summaries:
            // 0: 00- Move forward on track, search for IR
            // 1: 01- Stop and deliver mail
            // 2: 10- Wait for 1 second (Mail launch)
            // 3: 11- Move forward for 1 second, NOT searching for IR
        
    );
    
    reg [2:0] nextState;
    initial begin
        CurrentState <= 0;
        nextState <= 0;
    end
    
always @(posedge clk)
    begin
            case(CurrentState)
                0: begin
                // Move forward, look for IR
                    if(StateVars[0])
                        nextState = 1;
                    else
                        nextState = 0;
                end
                1: begin
                // Stop
                    if(StateVars[1])
                        nextState = 2;
                    else
                        nextState = 1;
                end
                2: begin
                // Wait
                    if(StateVars[2])
                        nextState = 3;
                    else
                        nextState = 2;
                end
                3: begin
                // Move forward, NOT look for IR
                    if(!StateVars[2])
                        nextState = 0;
                    else
                        nextState = 3;
                end
                default: begin
                    nextState = 0;
                end
            endcase
    end

always@(posedge clk)
    CurrentState <= nextState;
    
endmodule
